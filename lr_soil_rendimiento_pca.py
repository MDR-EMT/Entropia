# -*- coding: utf-8 -*-
"""LR_SOIL_Rendimiento_PCA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/113TS1K10XLlE2R2Yw9UEPQDdkMYQus_d

# Librerias
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn import preprocessing

"""## Cargado de Data"""

data = pd.read_csv("soil_Rendimiento_PCA3.csv")

data.head(5)

"""## Especificacion de Atributos y Objetivo"""

Xs = data.drop(['Rendimiento'], axis=1) # Atributos
y = data['Rendimiento'].values.reshape(-1,1) # Objetivo
reg = LinearRegression() # Regresion Lineal
reg.fit(Xs, y) # Entrenamiento de Y respecto a X's

"""## Interceptos y Coeficientes"""

print("Rendimiento")
print("Interceptos: \n",reg.intercept_,"\n")
print("Coeficiente: \n",reg.coef_)
print("\n")

"""## Modelo de Regrecion Lineal"""

print("El Modelo Resultante:\nRendimiento = {:.5} + {:.5}*Area + {:.5}*N + {:.5}*P205 + {:.5}*K2SO4 + {:.5}*CaO + {:.5}*MgO + {:.5}*Zn +{:.5}*Qfe"
      .format(
          reg.intercept_[0],
          reg.coef_[0][0],reg.coef_[0][1],
          reg.coef_[0][2],reg.coef_[0][3],
          reg.coef_[0][4],reg.coef_[0][5],
          reg.coef_[0][6],reg.coef_[0][7]))

"""## Precisión del Modelo"""

# Es la proporción de la varianza en la variable dependiente que es predecible a partir de la variable independiente
# "Z" percent of the variation in the "y" data is due to variation in the "x" data

percent = reg.score(Xs, y)
print("Precicion Modelo: ",percent,"\n")
print("Del total de Kg de paltas",(round(percent,5))*100,"% aproximadamente son influidas por las variables en la data")

"""## Testeo"""

def Rendimiento(Area,N,P205,K2SO4,CaO,MgO,Zn,Qfe):
    Ambos = reg.intercept_[0] + reg.coef_[0][0]*Area + reg.coef_[0][1]*N + reg.coef_[0][2]*P205 + reg.coef_[0][3]*K2SO4 + reg.coef_[0][4]*CaO + reg.coef_[0][5]*MgO + reg.coef_[0][6]*Zn + reg.coef_[0][7]*Qfe
    return Ambos
    #print(round(Ambos,2),"t/ha")

round(Rendimiento(0.28,188,54,171,99,38,1.2,0.2),2)

"""## Resultados Test OLS(Ordinary Least Squares)"""

X = np.column_stack((data['Area'], data['N'], data['P205'],
                     data['K2SO4'],data['CaO'], data['MgO'],
                     data['Zn'],data['Qfe']))

y = data['Rendimiento']

X2 = sm.add_constant(X)

Model = sm.OLS(y, X)
Results = Model.fit()

Results.params

Results.tvalues

print(Results.summary())
print("\n")

# Arr = []
# for x in range(0,40):
#     Arr.append(Ambos(x,0.84,148.77,40.89,136.59,17.4,26.97,6.96,1.74,3.48))
#     print("Parcela ",x+1,":\t",round(Ambos(x,0.84,148.77,40.89,136.59,17.4,26.97,6.96,1.74,3.48),3),"Kg")